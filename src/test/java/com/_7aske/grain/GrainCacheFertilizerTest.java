package com._7aske.grain;

import com._7aske.grain.cache.annotation.CacheEvict;
import com._7aske.grain.cache.annotation.CachePut;
import com._7aske.grain.cache.annotation.Cacheable;
import com._7aske.grain.core.component.Grain;
import com._7aske.grain.core.component.GrainInjector;
import com._7aske.grain.core.configuration.Configuration;
import com._7aske.grain.core.reflect.ProxyInterceptorAbstractFactoryRegistry;
import com._7aske.grain.core.reflect.factory.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Set;

import static org.junit.jupiter.api.Assertions.fail;

class GrainCacheFertilizerTest {

    @Grain
    public static class CacheTest {
        @Cacheable("cache")
        public String autoGeneratedKey(String param) {
            System.out.println("Non cached method 'autoGeneratedKey' called!");
            return "Cached " + param;
        }

        @CacheEvict(value = "cache", condition = "arg0 == 'a'")
        public String evictingOnCondition(String param) {
            System.out.println("Evicting!");
            return "Evicted " + param;
        }

        @CachePut("cache")
        public String put(String param) {
            System.out.println("Updating cache!");
            return "Put " + param;
        }
    }

    GrainInjector grainInjector;

    @BeforeEach
    void setUp() {
        grainInjector = new GrainInjector(Configuration.createDefault());
        grainInjector.inject(Set.of(CompositeGrainFactory.class, InterfaceGrainFactory.class, DefaultGrainFactory.class, GrainMethodGrainFactory.class, ProxyRegistryGrainFactory.class, ProxyInterceptorAbstractFactoryRegistry.class, GrainCacheFertilizer.class));
    }

    @Test
    void testCachePut() {
        grainInjector.inject(CacheTest.class);

        CacheTest cacheTest = grainInjector.getContainer().getGrain(CacheTest.class);

        String result = cacheTest.autoGeneratedKey("a");
        if (!result.equals("Cached a")) {
            fail("Expected 'Cached a' but got " + result);
        }

        result = cacheTest.put("a");
        if (!result.equals("Put a")) {
            fail("Expected 'Put a' but got " + result);
        }

        result = cacheTest.autoGeneratedKey("a");
        if (!result.equals("Put a")) {
            fail("Expected 'Put a' but got " + result);
        }
    }

    @Test
    void testCacheEvict() {
        grainInjector.inject(CacheTest.class);

        CacheTest cacheTest = grainInjector.getContainer().getGrain(CacheTest.class);

        String result = cacheTest.autoGeneratedKey("a");
        if (!result.equals("Cached a")) {
            fail("Expected 'Cached a' but got " + result);
        }

        result = cacheTest.evictingOnCondition("a");
        if (!result.equals("Evicted a")) {
            fail("Expected 'Evicted a' but got " + result);
        }

        result = cacheTest.autoGeneratedKey("a");
        if (!result.equals("Cached a")) {
            fail("Expected 'Cached a' but got " + result);
        }
    }
}